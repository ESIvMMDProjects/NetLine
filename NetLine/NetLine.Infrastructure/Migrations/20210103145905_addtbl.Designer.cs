// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetLine.Infrastructure.Context;

namespace NetLine.Infrastructure.Migrations
{
    [DbContext(typeof(NetLineDbContext))]
    [Migration("20210103145905_addtbl")]
    partial class addtbl
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("NetLine.Domain.Model.User.Order.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFinally")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("NetLine.Domain.Model.User.Order.OrderDetail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("DetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("NetLine.Domain.Models.ProductAndCategory.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "این دسته بندی اول است ",
                            Name = "دسته بندی اول"
                        },
                        new
                        {
                            Id = 2,
                            Description = "این دسته بندی دوم است ",
                            Name = "دسته بندی دوم"
                        },
                        new
                        {
                            Id = 3,
                            Description = "این دسته بندی سوم است ",
                            Name = "دسته بندی سوم"
                        },
                        new
                        {
                            Id = 4,
                            Description = "این دسته بندی چهارم است ",
                            Name = "دسته بندی چهارم"
                        });
                });

            modelBuilder.Entity("NetLine.Domain.Models.ProductAndCategory.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Price = 12000m,
                            QuantityInStock = 5
                        },
                        new
                        {
                            Id = 2,
                            Price = 14000m,
                            QuantityInStock = 4
                        },
                        new
                        {
                            Id = 3,
                            Price = 16000m,
                            QuantityInStock = 6
                        },
                        new
                        {
                            Id = 4,
                            Price = 20000m,
                            QuantityInStock = 7
                        });
                });

            modelBuilder.Entity("NetLine.Domain.Models.ProductAndCategory.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "این محصول اول است",
                            ItemId = 1,
                            Name = "محصول اول"
                        },
                        new
                        {
                            Id = 2,
                            Description = "این محصول دوم است",
                            ItemId = 2,
                            Name = "محصول دوم"
                        },
                        new
                        {
                            Id = 3,
                            Description = "این محصول سوم است ",
                            ItemId = 3,
                            Name = "محصول سوم"
                        },
                        new
                        {
                            Id = 4,
                            Description = "این محصول چهارم است ",
                            ItemId = 4,
                            Name = "محصول چهارم"
                        });
                });

            modelBuilder.Entity("NetLine.Domain.Models.ProductAndCategory.ProductToCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductToCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 2
                        },
                        new
                        {
                            CategoryId = 4,
                            ProductId = 4
                        },
                        new
                        {
                            CategoryId = 3,
                            ProductId = 3
                        });
                });

            modelBuilder.Entity("NetLine.Domain.Models.User.Account.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NetLine.Domain.Model.User.Order.OrderDetail", b =>
                {
                    b.HasOne("NetLine.Domain.Model.User.Order.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetLine.Domain.Models.ProductAndCategory.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NetLine.Domain.Models.ProductAndCategory.Product", b =>
                {
                    b.HasOne("NetLine.Domain.Models.ProductAndCategory.Item", "Item")
                        .WithOne("Product")
                        .HasForeignKey("NetLine.Domain.Models.ProductAndCategory.Product", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("NetLine.Domain.Models.ProductAndCategory.ProductToCategory", b =>
                {
                    b.HasOne("NetLine.Domain.Models.ProductAndCategory.Category", "Category")
                        .WithMany("ProductToCategory")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetLine.Domain.Models.ProductAndCategory.Product", "Product")
                        .WithMany("CategoryToProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NetLine.Domain.Model.User.Order.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("NetLine.Domain.Models.ProductAndCategory.Category", b =>
                {
                    b.Navigation("ProductToCategory");
                });

            modelBuilder.Entity("NetLine.Domain.Models.ProductAndCategory.Item", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("NetLine.Domain.Models.ProductAndCategory.Product", b =>
                {
                    b.Navigation("CategoryToProducts");

                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
